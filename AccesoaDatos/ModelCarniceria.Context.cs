//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoaDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PedidosCarniceriaEntities : DbContext
    {
        public PedidosCarniceriaEntities()
            : base("name=PedidosCarniceriaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Carnicero> Carnicero { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<EntregaPedido> EntregaPedido { get; set; }
        public virtual DbSet<Pedido> Pedido { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Repartidor> Repartidor { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Ubicacion> Ubicacion { get; set; }
    
        public virtual ObjectResult<carniceroPedido_Result> carniceroPedido(Nullable<int> idpedido)
        {
            var idpedidoParameter = idpedido.HasValue ?
                new ObjectParameter("idpedido", idpedido) :
                new ObjectParameter("idpedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<carniceroPedido_Result>("carniceroPedido", idpedidoParameter);
        }
    
        public virtual int DeleteCarni(Nullable<int> idCarn)
        {
            var idCarnParameter = idCarn.HasValue ?
                new ObjectParameter("idCarn", idCarn) :
                new ObjectParameter("idCarn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCarni", idCarnParameter);
        }
    
        public virtual int DeleteClient(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("idClient", idClient) :
                new ObjectParameter("idClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClient", idClientParameter);
        }
    
        public virtual int DeleteEntPed(Nullable<int> idEntrega)
        {
            var idEntregaParameter = idEntrega.HasValue ?
                new ObjectParameter("idEntrega", idEntrega) :
                new ObjectParameter("idEntrega", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEntPed", idEntregaParameter);
        }
    
        public virtual int DeletePed(Nullable<int> idPed)
        {
            var idPedParameter = idPed.HasValue ?
                new ObjectParameter("idPed", idPed) :
                new ObjectParameter("idPed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePed", idPedParameter);
        }
    
        public virtual int DeleteProd(Nullable<int> idProd)
        {
            var idProdParameter = idProd.HasValue ?
                new ObjectParameter("idProd", idProd) :
                new ObjectParameter("idProd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProd", idProdParameter);
        }
    
        public virtual int DeleteRep(Nullable<int> idRep)
        {
            var idRepParameter = idRep.HasValue ?
                new ObjectParameter("idRep", idRep) :
                new ObjectParameter("idRep", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRep", idRepParameter);
        }
    
        public virtual int DeleteUbi(Nullable<int> idUbi)
        {
            var idUbiParameter = idUbi.HasValue ?
                new ObjectParameter("idUbi", idUbi) :
                new ObjectParameter("idUbi", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUbi", idUbiParameter);
        }
    
        public virtual int InsertCarn(string nom, string cel, string correo, Nullable<short> exp)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var celParameter = cel != null ?
                new ObjectParameter("Cel", cel) :
                new ObjectParameter("Cel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var expParameter = exp.HasValue ?
                new ObjectParameter("Exp", exp) :
                new ObjectParameter("Exp", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCarn", nomParameter, celParameter, correoParameter, expParameter);
        }
    
        public virtual int InsertClient(string nom, string apP, string apM, string cel, string correo)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var apPParameter = apP != null ?
                new ObjectParameter("ApP", apP) :
                new ObjectParameter("ApP", typeof(string));
    
            var apMParameter = apM != null ?
                new ObjectParameter("ApM", apM) :
                new ObjectParameter("ApM", typeof(string));
    
            var celParameter = cel != null ?
                new ObjectParameter("Cel", cel) :
                new ObjectParameter("Cel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClient", nomParameter, apPParameter, apMParameter, celParameter, correoParameter);
        }
    
        public virtual int InsertEntPed(Nullable<int> fped, Nullable<int> fRep, Nullable<System.DateTime> fechSalida, Nullable<System.DateTime> fechEntre, string estado)
        {
            var fpedParameter = fped.HasValue ?
                new ObjectParameter("Fped", fped) :
                new ObjectParameter("Fped", typeof(int));
    
            var fRepParameter = fRep.HasValue ?
                new ObjectParameter("fRep", fRep) :
                new ObjectParameter("fRep", typeof(int));
    
            var fechSalidaParameter = fechSalida.HasValue ?
                new ObjectParameter("FechSalida", fechSalida) :
                new ObjectParameter("FechSalida", typeof(System.DateTime));
    
            var fechEntreParameter = fechEntre.HasValue ?
                new ObjectParameter("FechEntre", fechEntre) :
                new ObjectParameter("FechEntre", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEntPed", fpedParameter, fRepParameter, fechSalidaParameter, fechEntreParameter, estadoParameter);
        }
    
        public virtual int InsertPedido(Nullable<System.DateTime> fHra, Nullable<int> fCliente, Nullable<int> fCarn, Nullable<bool> envio, string pago)
        {
            var fHraParameter = fHra.HasValue ?
                new ObjectParameter("FHra", fHra) :
                new ObjectParameter("FHra", typeof(System.DateTime));
    
            var fClienteParameter = fCliente.HasValue ?
                new ObjectParameter("fCliente", fCliente) :
                new ObjectParameter("fCliente", typeof(int));
    
            var fCarnParameter = fCarn.HasValue ?
                new ObjectParameter("FCarn", fCarn) :
                new ObjectParameter("FCarn", typeof(int));
    
            var envioParameter = envio.HasValue ?
                new ObjectParameter("Envio", envio) :
                new ObjectParameter("Envio", typeof(bool));
    
            var pagoParameter = pago != null ?
                new ObjectParameter("Pago", pago) :
                new ObjectParameter("Pago", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPedido", fHraParameter, fClienteParameter, fCarnParameter, envioParameter, pagoParameter);
        }
    
        public virtual int InsertProd(string nomProd, Nullable<int> peso, Nullable<short> cant, Nullable<double> preciofin, string nota, Nullable<int> fPed)
        {
            var nomProdParameter = nomProd != null ?
                new ObjectParameter("NomProd", nomProd) :
                new ObjectParameter("NomProd", typeof(string));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(int));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("Cant", cant) :
                new ObjectParameter("Cant", typeof(short));
    
            var preciofinParameter = preciofin.HasValue ?
                new ObjectParameter("Preciofin", preciofin) :
                new ObjectParameter("Preciofin", typeof(double));
    
            var notaParameter = nota != null ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(string));
    
            var fPedParameter = fPed.HasValue ?
                new ObjectParameter("fPed", fPed) :
                new ObjectParameter("fPed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProd", nomProdParameter, pesoParameter, cantParameter, preciofinParameter, notaParameter, fPedParameter);
        }
    
        public virtual int InsertRep(string nom, string celular, string licencia)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var licenciaParameter = licencia != null ?
                new ObjectParameter("Licencia", licencia) :
                new ObjectParameter("Licencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRep", nomParameter, celularParameter, licenciaParameter);
        }
    
        public virtual int InsertUbi(string col, string calleNum, string mun, string ciud, string @ref, string carac, string cp, Nullable<int> fCli)
        {
            var colParameter = col != null ?
                new ObjectParameter("Col", col) :
                new ObjectParameter("Col", typeof(string));
    
            var calleNumParameter = calleNum != null ?
                new ObjectParameter("CalleNum", calleNum) :
                new ObjectParameter("CalleNum", typeof(string));
    
            var munParameter = mun != null ?
                new ObjectParameter("Mun", mun) :
                new ObjectParameter("Mun", typeof(string));
    
            var ciudParameter = ciud != null ?
                new ObjectParameter("Ciud", ciud) :
                new ObjectParameter("Ciud", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("ref", @ref) :
                new ObjectParameter("ref", typeof(string));
    
            var caracParameter = carac != null ?
                new ObjectParameter("carac", carac) :
                new ObjectParameter("carac", typeof(string));
    
            var cpParameter = cp != null ?
                new ObjectParameter("Cp", cp) :
                new ObjectParameter("Cp", typeof(string));
    
            var fCliParameter = fCli.HasValue ?
                new ObjectParameter("FCli", fCli) :
                new ObjectParameter("FCli", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUbi", colParameter, calleNumParameter, munParameter, ciudParameter, refParameter, caracParameter, cpParameter, fCliParameter);
        }
    
        public virtual ObjectResult<pagodelivery_Result> pagodelivery(Nullable<int> namedelivery)
        {
            var namedeliveryParameter = namedelivery.HasValue ?
                new ObjectParameter("namedelivery", namedelivery) :
                new ObjectParameter("namedelivery", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pagodelivery_Result>("pagodelivery", namedeliveryParameter);
        }
    
        public virtual ObjectResult<pedidoaclaración_Result> pedidoaclaración(Nullable<int> idprod)
        {
            var idprodParameter = idprod.HasValue ?
                new ObjectParameter("idprod", idprod) :
                new ObjectParameter("idprod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pedidoaclaración_Result>("pedidoaclaración", idprodParameter);
        }
    
        public virtual ObjectResult<ShowPedido_Result> ShowPedido(string nameclient)
        {
            var nameclientParameter = nameclient != null ?
                new ObjectParameter("nameclient", nameclient) :
                new ObjectParameter("nameclient", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowPedido_Result>("ShowPedido", nameclientParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateCarni(Nullable<int> idcarn, string nom, string cel, string correo, Nullable<short> exp)
        {
            var idcarnParameter = idcarn.HasValue ?
                new ObjectParameter("idcarn", idcarn) :
                new ObjectParameter("idcarn", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var celParameter = cel != null ?
                new ObjectParameter("Cel", cel) :
                new ObjectParameter("Cel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var expParameter = exp.HasValue ?
                new ObjectParameter("Exp", exp) :
                new ObjectParameter("Exp", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCarni", idcarnParameter, nomParameter, celParameter, correoParameter, expParameter);
        }
    
        public virtual int UpdateClient(Nullable<int> idclient, string nom, string apP, string apM, string cel, string correo)
        {
            var idclientParameter = idclient.HasValue ?
                new ObjectParameter("idclient", idclient) :
                new ObjectParameter("idclient", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var apPParameter = apP != null ?
                new ObjectParameter("ApP", apP) :
                new ObjectParameter("ApP", typeof(string));
    
            var apMParameter = apM != null ?
                new ObjectParameter("ApM", apM) :
                new ObjectParameter("ApM", typeof(string));
    
            var celParameter = cel != null ?
                new ObjectParameter("Cel", cel) :
                new ObjectParameter("Cel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClient", idclientParameter, nomParameter, apPParameter, apMParameter, celParameter, correoParameter);
        }
    
        public virtual int UpdateEntPed(Nullable<int> idEnt, Nullable<int> fped, Nullable<int> fRep, Nullable<System.DateTime> fechSalida, Nullable<System.DateTime> fechEntre, string estado)
        {
            var idEntParameter = idEnt.HasValue ?
                new ObjectParameter("idEnt", idEnt) :
                new ObjectParameter("idEnt", typeof(int));
    
            var fpedParameter = fped.HasValue ?
                new ObjectParameter("Fped", fped) :
                new ObjectParameter("Fped", typeof(int));
    
            var fRepParameter = fRep.HasValue ?
                new ObjectParameter("fRep", fRep) :
                new ObjectParameter("fRep", typeof(int));
    
            var fechSalidaParameter = fechSalida.HasValue ?
                new ObjectParameter("FechSalida", fechSalida) :
                new ObjectParameter("FechSalida", typeof(System.DateTime));
    
            var fechEntreParameter = fechEntre.HasValue ?
                new ObjectParameter("FechEntre", fechEntre) :
                new ObjectParameter("FechEntre", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEntPed", idEntParameter, fpedParameter, fRepParameter, fechSalidaParameter, fechEntreParameter, estadoParameter);
        }
    
        public virtual int UpdatePed(Nullable<int> idped, Nullable<System.DateTime> fHra, Nullable<int> fCliente, Nullable<int> fCarn, Nullable<bool> envio, string pago)
        {
            var idpedParameter = idped.HasValue ?
                new ObjectParameter("idped", idped) :
                new ObjectParameter("idped", typeof(int));
    
            var fHraParameter = fHra.HasValue ?
                new ObjectParameter("FHra", fHra) :
                new ObjectParameter("FHra", typeof(System.DateTime));
    
            var fClienteParameter = fCliente.HasValue ?
                new ObjectParameter("fCliente", fCliente) :
                new ObjectParameter("fCliente", typeof(int));
    
            var fCarnParameter = fCarn.HasValue ?
                new ObjectParameter("FCarn", fCarn) :
                new ObjectParameter("FCarn", typeof(int));
    
            var envioParameter = envio.HasValue ?
                new ObjectParameter("Envio", envio) :
                new ObjectParameter("Envio", typeof(bool));
    
            var pagoParameter = pago != null ?
                new ObjectParameter("Pago", pago) :
                new ObjectParameter("Pago", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePed", idpedParameter, fHraParameter, fClienteParameter, fCarnParameter, envioParameter, pagoParameter);
        }
    
        public virtual int UpdateProd(Nullable<int> idprod, string nomProd, Nullable<int> peso, Nullable<short> cant, Nullable<double> preciofin, string nota, Nullable<int> fPed)
        {
            var idprodParameter = idprod.HasValue ?
                new ObjectParameter("idprod", idprod) :
                new ObjectParameter("idprod", typeof(int));
    
            var nomProdParameter = nomProd != null ?
                new ObjectParameter("NomProd", nomProd) :
                new ObjectParameter("NomProd", typeof(string));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(int));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("Cant", cant) :
                new ObjectParameter("Cant", typeof(short));
    
            var preciofinParameter = preciofin.HasValue ?
                new ObjectParameter("Preciofin", preciofin) :
                new ObjectParameter("Preciofin", typeof(double));
    
            var notaParameter = nota != null ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(string));
    
            var fPedParameter = fPed.HasValue ?
                new ObjectParameter("fPed", fPed) :
                new ObjectParameter("fPed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProd", idprodParameter, nomProdParameter, pesoParameter, cantParameter, preciofinParameter, notaParameter, fPedParameter);
        }
    
        public virtual int UpdateRep(Nullable<int> idrep, string nom, string celular, string licencia)
        {
            var idrepParameter = idrep.HasValue ?
                new ObjectParameter("idrep", idrep) :
                new ObjectParameter("idrep", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var licenciaParameter = licencia != null ?
                new ObjectParameter("Licencia", licencia) :
                new ObjectParameter("Licencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRep", idrepParameter, nomParameter, celularParameter, licenciaParameter);
        }
    
        public virtual int UpdateUbi(Nullable<int> idubi, string col, string calleNum, string mun, string ciud, string @ref, string carac, string cp, Nullable<int> fCli)
        {
            var idubiParameter = idubi.HasValue ?
                new ObjectParameter("idubi", idubi) :
                new ObjectParameter("idubi", typeof(int));
    
            var colParameter = col != null ?
                new ObjectParameter("Col", col) :
                new ObjectParameter("Col", typeof(string));
    
            var calleNumParameter = calleNum != null ?
                new ObjectParameter("CalleNum", calleNum) :
                new ObjectParameter("CalleNum", typeof(string));
    
            var munParameter = mun != null ?
                new ObjectParameter("Mun", mun) :
                new ObjectParameter("Mun", typeof(string));
    
            var ciudParameter = ciud != null ?
                new ObjectParameter("Ciud", ciud) :
                new ObjectParameter("Ciud", typeof(string));
    
            var refParameter = @ref != null ?
                new ObjectParameter("ref", @ref) :
                new ObjectParameter("ref", typeof(string));
    
            var caracParameter = carac != null ?
                new ObjectParameter("carac", carac) :
                new ObjectParameter("carac", typeof(string));
    
            var cpParameter = cp != null ?
                new ObjectParameter("Cp", cp) :
                new ObjectParameter("Cp", typeof(string));
    
            var fCliParameter = fCli.HasValue ?
                new ObjectParameter("FCli", fCli) :
                new ObjectParameter("FCli", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUbi", idubiParameter, colParameter, calleNumParameter, munParameter, ciudParameter, refParameter, caracParameter, cpParameter, fCliParameter);
        }
    }
}
